(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{38:function(e){e.exports={data:{allBlogPost:{edges:[{node:{id:"349f3a413b76b874add1ab0b0351b384",date:"10 February, 2019",title:"NodeJS Event สำคัญฉะไหน",path:"/BlogPost/NodeJS-EventEmitter",content:'<p>วันนี้เราจะได้รู้กันว่าตัว NodeJS คืออะไร ดียังไง เริ่มได้~~~</p>\n<p><br/><br/></p>\n<h4 id="node-event-"><a href="#node-event-" aria-hidden="true"><span class="icon icon-link"></span></a>Node Event ?</h4>\n<p>        ด้วยความที่ว่า NodeJS เองทำงานเป็นแบบ event-driven architecture หรือเรียกแบบไทยๆว่าการขับเคลื่อนทุกอย่างด้วย Event มาถึงตรงนี้ทุกคนคงจะงงว่าแล้วตัว event-driven คืออะไร</p>\n  <p align="center">\n    <img src="https://i.imgur.com/yZjiHQy.jpg">\n  </p>  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;รูปนี้ทุกคนคงเข้าใจ event driven ทุกคนจะเห็นว่ามันคือ Observer design pattern นั้นเองนะครับซึ่งตัว Observer pattern เองเป็นฐานในการทำ event driven ผมขอไม่ลงลึกเรื่อง Observer pattern ง่ายๆก็คือ Observer pattern เอาไว้สำหรับสังเกตุการเปลี่ยนแปลงข้อมูลว่าเปลี่ยนแปลงไปยังไงบ้างนั้นเองครับ\n<br/><br/>\n<h4 id="node-event-ใช้งานยังไง-"><a href="#node-event-%E0%B9%83%E0%B8%8A%E0%B9%89%E0%B8%87%E0%B8%B2%E0%B8%99%E0%B8%A2%E0%B8%B1%E0%B8%87%E0%B9%84%E0%B8%87-" aria-hidden="true"><span class="icon icon-link"></span></a>Node Event ใช้งานยังไง ?</h4>\n<p>มาเริ่มใช้ Event emitter กันเลยครับผมขอวาดภาพว่าเราจะทำ service อะไรด้วย Event Emitter นะครับ</p>\n<p><img src="https://i.imgur.com/OECu3Yh.png" alt="OECu3Yh.png"></p>\n<p>ผมจะลองเขียนตามนี้นะครับ เริ่ม~~~\n<br/><br/>\n<strong>#1 ทำการสร้าง require และสร้าง event ตัวนึง</strong></p>\n<pre><code>  const EventEmitter = require(\'events\');\n  const myService = new EventEmitter();\n</code></pre>\n<p><br/><br/>\n<strong>#2 สร้างตัว emit data</strong></p>\n<pre><code>myService.emit(\'registration\',{\n      name: "Tar",\n      email: "Tar@email.com"\n   })\n</code></pre>\n<p>ต้องอธิบายก่อนว่าตัว registration คือชื่อ event ครับส่วนตัว object คือข้อมูลที่เราจะส่งผ่านตัว regitration event</p>\n<p><br/><br/>\n<strong>#3 สร้างตัว listener สำหรับ email &#x26; admin</strong></p>\n<pre><code>  // ใครยังไม่เคยใช้ => หรือ arrow function ผมมี ref ไว้ข้างล่างครับ\n  // email service\n  myService.on(\'registration\', (userData) => {\n    console.log(`ส่ง email ไปหาคุณ ${userData.name} ไปที่ ${userData.email}`)\n  })\n\n  // admin service\n  myService.on(\'registration\', (userData)=>{\n    console.log(`เจ้านายครับมีลูกค้าสมัครสมาชิก คุณ ${userData.name}$`)\n  })\n</code></pre>\n<p><br/><br/>\n<strong>#4 โค๊ดเต็มๆตามนี้เลยครับ</strong></p>\n<pre><code>  const EventEmitter = require(\'events\');\n  const myService = new EventEmitter();\n\n  myService.emit(\'registration\',{\n    name: "Tar",\n    email: "Tar@email.com"\n  })\n\n  myService.on(\'registration\', (userData) => {\n    console.log(`ส่ง email ไปหาคุณ ${userData.name} ไปที่ ${userData.email}`)\n  })\n\n\n  myService.on(\'registration\', (userData)=>{\n    console.log(`เจ้านายครับมีลูกค้าสมัครสมาชิก คุณ ${userData.name}$`)\n  })\n</code></pre>\n<br/>\nก็จบกันไปแล้วนะครับสำหรับ NodeJS Event Emitter แบบพื้นฐานมาก!!!! ผมก็หวังว่าผู้อ่านจะเข้าใจการทำงานและการเขียน Event Emitter นะครับผม วันนี้ผมต้าขอตัวลาไปก่อนชะแว๊บ~~~\n<p>Ref:</p>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="nofollow noopener noreferrer">Arrow functions</a></p>\n<p><a href="https://en.wikipedia.org/wiki/Event-driven_architecture" target="_blank" rel="nofollow noopener noreferrer">Event-driven architecture</a></p>\n<p><a href="https://en.wikipedia.org/wiki/Observer_pattern" target="_blank" rel="nofollow noopener noreferrer">Observer pattern</a></p>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" target="_blank" rel="nofollow noopener noreferrer">Template literals</a></p>\n',description:"ผมเห็นหลายๆคนที่เขียน NodeJS แล้วไม่ค่อยมีคนใช้ EventEmitter หรือบางทีก็ใช้",author:"Tar Jarupong",image:{type:"image",mimeType:"image/png",src:"https://i.imgur.com/7oG5ce7.png"}}},{node:{id:"67c5dae4bf3034994e3e0d6fb27f7a90",date:"10 February, 2019",title:"Pipe function ใน Javascript",path:"/BlogPost/Pipe-Javascript",content:'<p>สำหรับใครที่เคยใช้เจ้าแพะหรือ ramdaJS มาก่อนคงได้ยินหรือเคยใช้ pipe() มาอยู่แล้ว ซึ่งพี่ pipe() เอาไว้ทำอะไรน่ะเหรอ ดูตัวอย่างเลยครับ    </p>\n<pre><code>getFirstChar( toLowerCase(data))\n</code></pre>\n<p>ทุกเห็นคงคิดว่าก็ไม่เห็นมีไรเลยซับซ้อนตรงไหนแค่ 2 functions เอง แต่ถ้าสมมุติเป็นแบบนี้ล่ะ</p>\n<pre><code>getFirstChar( toLowerCase(convertAsciiToText(getName(data))))\n</code></pre>\n<p><img src="https://firebasestorage.googleapis.com/v0/b/myblog-7f48d.appspot.com/o/flamelink%2Fmedia%2F1545679658057_1545660065385_holy-shit-what-dc0kau.jpg?alt=media&#x26;token=494d24a5-5bba-42fc-a2c0-6fa7b851a73f"></p>\n<p>เฮ๊<del></del>~~ ทุกคนกำลังคิดแบบนี้อยู่แน่ๆ</p>\n<p>ก่อนที่เราจะมาพูดถึงวิธีการแก้ไขปัญหา เรามาพูดถึงแนวคิดของเจ้า pipe กันก่อน ต้องย้อนกลับไปความรู้ทางคณิตศาสตร์ตอน ม. 5 การเลยคือเรื่อง relation and function ต้องขอบอกก่อนว่าผมก็ไม่เก่งคณิตศาสตร์แต่ผมจะพยายามอธิบายให้ง่ายที่สุดเท่าที่จะทำได้นะครับ</p>\n<p><strong>Math #1 basic function</strong></p>\n<br/>\nสมมุติว่าผมสร้าง function ตัวนึงสำหรับรับค่า x เพื่อนำไปบวก 2\n<pre><code>f(x) = x + 2\n</code></pre>\n<br/>\nทีนี้ผมสร้างอีก function นึงสำหรับรับค่า x แล้วทำไปคูณ 5\n<pre><code>g(x) = x * 5\n</code></pre>\n<br/>\nเริ่มจาก function แรกก่อน\n<pre><code>f(2) = 2 + 2\n     = 4\n</code></pre>\n<br/>\nต่อมาตัวก็เป็น function g\n<pre><code>g(2) = 2 * 5\n     = 10\n</code></pre>\n<br/>\nนี้ก็เป็นตัวอย่างเล็กๆน้อยจากเรื่อง function สำหรับ ม. 5 ต่อไปมาเริ่มในสิ่งที่ยากขึ้นอีกระดับนึงเรียกว่า composite function เริ่ม!!\n<p><strong>Math #2 Composite function</strong>\n<br/>\nง่ายๆมันคือการรวม function เข้าด้วยกันนั้นเอง ผมขอยก 2 functions ด้านบนมาด้วยนะครับจะได้ไม่เสียเวลา มันก็จะได้แบบนี้</p>\n<br/>\nอันดับแรกผมเอา 2 function2 นี้รวมกัน\n<pre><code>f(g(x))\n</code></pre>\n<br/>\nผมจะเขียนแนวการคิดไปทีละขั้นตอนเน้อ...\n<pre><code>f(g(x)) = f(x * 5)  \n        = (x * 5) + 2\n</code></pre>\n<br/>\nลองมาดูตัวอย่างกัน\n<pre><code>f(g(2)) = f(2 * 5)  \n        = (2 * 5) + 2  \n        = 10 + 2  \n        = 12\n</code></pre>\n<br/>\nเอ๊ะแล้วเจ้า pipe() สุดที่รักของเรามันเกี่ยวอะไรกับคณิตศาสตร์ชวนปวดหัว ผมต้องบอกเลยว่ามันคืออันเดียวกัน ผมจะเปรียบเทียบให้ดู\n<pre><code>f(g(x)) = getFirstChar( toLowerCase(data))\n</code></pre>\n<br/>\nเห็นมั๊ยว่าเหมือนกันเป๊ะๆ เรามาดูโค๊ด pipe() กันเลย\n<pre><code>const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x)\n</code></pre>\n<br/>\n<p>สำหรับใครที่ไม่รู้จัก Rest Parameter &#x26; Reduce Parameter ตามนี้โล๊ดวิธีการใช้ตัว pipe() ก็ตามนี้เลย</p>\n<br/>\n<pre><code>pipe(getFirstChar, toLowerCase, convertAsciiToText, getName)(data)\n</code></pre>\n<br/>\n<p>เห็นมั๊ยว่าสะดวกและอ่านงานกว่าเยอะ ถือว่าเป็นวิธีที่ดีมากๆเป็นไงบ้างครับ สำหรับอะไรแบบนี้</p>\n<br/>\nRef:\n<p><a href="https://medium.com/front-end-weekly/pipe-and-compose-in-javascript-5b04004ac937" target="_blank" rel="nofollow noopener noreferrer">pipe</a> \n<a href="https://medium.freecodecamp.org/how-do-javascript-rest-parameters-actually-work-227726e16cc8" target="_blank" rel="nofollow noopener noreferrer">rest parameter</a>\n<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="nofollow noopener noreferrer">reduce</a></p>\n',description:"ท่านใดเคยประสบปัญหาเรื่องการใช้ transformation function เยอะๆรึเปล่า ผมมีทางแก้มาทำเสนอ",author:"Tar Jarupong",image:{type:"image",mimeType:"image/jpeg",src:"https://i.imgur.com/fp0HTAi.jpg"}}},{node:{id:"30334f237e476b6ea169e2463ee66dbe",date:"9 February, 2019",title:"สวัสดีชาวโลกกก V2",path:"/BlogPost/hello-world",content:"<p>คือเรื่องของเรื่องก็คืออยู่ๆรู้สึกว่าอีตัว firebase &#x26; flamelink มันเริ่มไม่ตอบโจทย์ด้วยเรื่องตัว editor ของเพราะด้วยความที่ว่ามันมี error เยอะมากและทาง flamelink ก็ไม่แก้ไขให้ผมสักที ก็ได้แค่รอร๊อรอ จนในที่สุดก็ตัดใจว่า ไปเขียน markdown ก็ได้ฟ๊ะแต่ด้วยความที่ตัวเองไม่ถนัด markdown อย่าเรียกว่าไม่ถนัดสิต้องเรียกเข้าั้นโง่ markdown มากๆเพราะไม่เคยใช้เลยจะไปเขียนใน atom editor ก็ช้าแล้วจะใช้อะไรดีล่ะ นั้นก็คือ boostnote.io นั้นเองมันมาช่วยให้ผมมีความรู้สึกอยากเขียน note มากขึ้น~ ที่จริงไม่เกี่ยวหรอกแค่อยากจะแยก markdown note ออกมาแค่นั้นฮ่าๆๆๆ ถ้าไปเขียน markdown ใน atom editor มันรู้สึกเหมือนตัวเองเขียนโค๊ดก็เลยคิดว่าถ้ามีเวลามาเขียน blog คงมาเขียนใน boostnote แทน ผมหมดเรื่องจะบ่นแล้วง๊าาาา~ ของจบเลยก็แล้วกันนะครับ ชะแว๊บบบบบบ</p>\n",description:"ผมกลับมาเขียน blog ดูอีกครั้งและ design เว็บใหม่",author:"Tar Jarupong",image:{type:"image",mimeType:"image/jpeg",src:"https://i.imgur.com/4X28DdS.jpg"}}}]}}}}}]);