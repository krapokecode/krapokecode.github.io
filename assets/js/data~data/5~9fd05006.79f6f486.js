(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{43:function(e){e.exports={data:{allBlogPost:{edges:[{node:{id:"cfbd7cdf15ecf548001e54bd9f0ca595",date:"12 February, 2019",title:"ทำไมเราถึงควรใช้ MongoDB native แทน Mongoose",path:"/BlogPost/NodeJS-%2B-MongoDB-native",content:'<p>โดยปรกติแล้วเราจะเห็นบทความส่วนใหญ่ จะเป็น NodeJS + Mongoose ซึ่งถ้าถามว่าดีมั๊ย?​ มันก็ดีแต่สิงที่จะประสบพบเจอก็คือเรื่อง performance</p>\n<table>\n<thead>\n<tr>\n<th>FindOne</th>\n<th>Find</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src="https://i.imgur.com/ZUiNwsA.png" alt="ZUiNwsA.png"></td>\n<td><img src="https://i.imgur.com/2487u8h.png" alt="2487u8h.png"></td>\n</tr>\n</tbody>\n</table>\n<br>\n<table>\n<thead>\n<tr>\n<th>Insert</th>\n<th>InsertMany</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src="https://i.imgur.com/gohqOjl.png" alt="gohqOjl.png"></td>\n<td><img src="https://i.imgur.com/abX1IC7.png" alt="abX1IC7.png"></td>\n</tr>\n</tbody>\n</table>\n<p>เราจะเห็นว่าตัว Op/sec ของตัว Mongoose ทำงานช้ากว่า MongoDB native เร็วกว่า 2 เท่า</p>\n<h3 id="แต่"><a href="#%E0%B9%81%E0%B8%95%E0%B9%88" aria-hidden="true"><span class="icon icon-link"></span></a>แต่!!</h3>\n<p>ทำไมเราถึงยังใช้ Mongoose อยู่ นั้นก็เพราะว่า Mongoose มันออกแบบมาแก้ปัญหาเรื่อง Callback ใน MongoDB native ยังไงล๊า เราลองมาดูโค๊ดกัน</p>\n<br>\n<p><strong>Mongoose</strong></p>\n<pre><code> const mongoose = require(\'mongoose\');\n\n    const mongoDB = \'mongodb://127.0.0.1/my_database\';\n    mongoose.connect(mongoDB);\n\n    mongoose.Promise = global.Promise;\n    const db = mongoose.connection;\n</code></pre>\n<br>\n<p><strong>MongoDB Native</strong></p>\n<pre><code> const MongoClient = require(\'mongodb\').MongoClient;\n    const url = "mongodb://localhost:27017/mydb";\n\n    MongoClient.connect(url, function(err, db) {\n      if (err) throw err;\n      db.close();\n    });\n</code></pre>\n<p>ทุกคนก็จะเห็นว่า ตัว MongoDB native มันเป็น callback ซึ่งมันจะเกิด callback hell ในที่สุดถ้าเรามีการทำ operation กับ MongoDB มาขึ้น\nแล้วเราจะแก้ไขยังไงดี นั้นสิทำยังไงดีล่ะครับท่านผู้ชม พอดีผมขี้เกียจเขียนต่อแล้วค่อยมาต่อคราวหน้านะขอรับ</p>\n<p>Ref:</p>\n<p><a href="https://medium.com/@bugwheels94/performance-difference-in-mongoose-vs-mongodb-60be831c69ad" target="_blank" rel="nofollow noopener noreferrer">performance-difference-in-mongoose-vs-mongodb</a></p>\n',description:"MongoDB Native มันดียังไงนะทำไมถึงน่าใช้",author:"Tar Jarupong",image:{type:"image",mimeType:"image/png",src:"https://i.imgur.com/6YfCOxy.png"}}},{node:{id:"349f3a413b76b874add1ab0b0351b384",date:"10 February, 2019",title:"NodeJS Event Emitter สำคัญฉะไหน",path:"/BlogPost/NodeJS-EventEmitter",content:'<p>วันนี้เราจะได้รู้กันว่าตัว NodeJS คืออะไร ดียังไง เริ่มได้~~~</p>\n<p><br/><br/></p>\n<h4 id="node-event-emitter-"><a href="#node-event-emitter-" aria-hidden="true"><span class="icon icon-link"></span></a>Node Event Emitter ?</h4>\n<p>      ด้วยความที่ว่า NodeJS เองทำงานเป็นแบบ event-driven architecture หรือเรียกแบบไทยๆว่าการขับเคลื่อนทุกอย่างด้วย Event มาถึงตรงนี้ทุกคนคงจะงงว่าแล้วตัว event-driven คืออะไร</p>\n  <p align="center">\n    <img src="https://i.imgur.com/yZjiHQy.jpg">\n  </p>  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;รูปนี้ทุกคนคงเข้าใจ event driven ทุกคนจะเห็นว่ามันคือ Observer design pattern นั้นเองนะครับซึ่งตัว Observer pattern เองเป็นฐานในการทำ event driven ผมขอไม่ลงลึกเรื่อง Observer pattern ง่ายๆก็คือ Observer pattern เอาไว้สำหรับสังเกตุการเปลี่ยนแปลงข้อมูลว่าเปลี่ยนแปลงไปยังไงบ้างนั้นเองครับ\n<br/><br/>\n<h4 id="node-event-ใช้งานยังไง-"><a href="#node-event-%E0%B9%83%E0%B8%8A%E0%B9%89%E0%B8%87%E0%B8%B2%E0%B8%99%E0%B8%A2%E0%B8%B1%E0%B8%87%E0%B9%84%E0%B8%87-" aria-hidden="true"><span class="icon icon-link"></span></a>Node Event ใช้งานยังไง ?</h4>\n<p>มาเริ่มใช้ Event emitter กันเลยครับผมขอวาดภาพว่าเราจะทำ service อะไรด้วย Event Emitter นะครับ</p>\n<p><img src="https://i.imgur.com/OECu3Yh.png" alt="OECu3Yh.png"></p>\n<p>ผมจะลองเขียนตามนี้นะครับ เริ่ม~~~\n<br/><br/>\n<strong>#1 ทำการสร้าง require และสร้าง event ตัวนึง</strong></p>\n<pre><code>const EventEmitter = require(\'events\');\n    const myService = new EventEmitter();\n</code></pre>\n<p><br/><br/>\n<strong>#2 สร้างตัว emit data</strong></p>\n<pre><code>myService.emit(\'registration\',{\n      name: "Tar",\n      email: "Tar@email.com"\n   })\n</code></pre>\n<p>ต้องอธิบายก่อนว่าตัว registration คือชื่อ event ครับส่วนตัว object คือข้อมูลที่เราจะส่งผ่านตัว regitration event</p>\n<p><br/><br/>\n<strong>#3 สร้างตัว listener สำหรับ email &#x26; admin</strong></p>\n<pre><code>  // ใครยังไม่เคยใช้ => หรือ arrow function ผมมี ref ไว้ข้างล่างครับ\n  // email service\n  myService.on(\'registration\', (userData) => {\n    console.log(`ส่ง email ไปหาคุณ ${userData.name} ไปที่ ${userData.email}`)\n  })\n\n  // admin service\n  myService.on(\'registration\', (userData)=>{\n    console.log(`เจ้านายครับมีลูกค้าสมัครสมาชิก คุณ ${userData.name}$`)\n  })\n</code></pre>\n<p><br/><br/>\n<strong>#4 โค๊ดเต็มๆตามนี้เลยครับ</strong></p>\n<pre><code>  const EventEmitter = require(\'events\');\n  const myService = new EventEmitter();\n\n  myService.emit(\'registration\',{\n    name: "Tar",\n    email: "Tar@email.com"\n  })\n\n  myService.on(\'registration\', (userData) => {\n    console.log(`ส่ง email ไปหาคุณ ${userData.name} ไปที่ ${userData.email}`)\n  })\n\n\n  myService.on(\'registration\', (userData)=>{\n    console.log(`เจ้านายครับมีลูกค้าสมัครสมาชิก คุณ ${userData.name}$`)\n  })\n</code></pre>\n<br/>\nก็จบกันไปแล้วนะครับสำหรับ NodeJS Event Emitter แบบพื้นฐานมาก!!!! ผมก็หวังว่าผู้อ่านจะเข้าใจการทำงานและการเขียน Event Emitter นะครับผม วันนี้ผมต้าขอตัวลาไปก่อนชะแว๊บ~~~\n<p>Ref:</p>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="nofollow noopener noreferrer">Arrow functions</a></p>\n<p><a href="https://en.wikipedia.org/wiki/Event-driven_architecture" target="_blank" rel="nofollow noopener noreferrer">Event-driven architecture</a></p>\n<p><a href="https://en.wikipedia.org/wiki/Observer_pattern" target="_blank" rel="nofollow noopener noreferrer">Observer pattern</a></p>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" target="_blank" rel="nofollow noopener noreferrer">Template literals</a></p>\n',description:"ผมเห็นหลายๆคนที่เขียน NodeJS แล้วไม่ค่อยมีคนใช้ EventEmitter หรือบางทีก็ใช้",author:"Tar Jarupong",image:{type:"image",mimeType:"image/png",src:"https://i.imgur.com/7oG5ce7.png"}}},{node:{id:"30334f237e476b6ea169e2463ee66dbe",date:"9 February, 2019",title:"สวัสดีชาวโลกกก V2",path:"/BlogPost/hello-world",content:"<p>คือเรื่องของเรื่องก็คืออยู่ๆรู้สึกว่าอีตัว firebase &#x26; flamelink มันเริ่มไม่ตอบโจทย์ด้วยเรื่องตัว editor ของเพราะด้วยความที่ว่ามันมี error เยอะมากและทาง flamelink ก็ไม่แก้ไขให้ผมสักที ก็ได้แค่รอร๊อรอ จนในที่สุดก็ตัดใจว่า ไปเขียน markdown ก็ได้ฟ๊ะแต่ด้วยความที่ตัวเองไม่ถนัด markdown อย่าเรียกว่าไม่ถนัดสิต้องเรียกเข้าั้นโง่ markdown มากๆเพราะไม่เคยใช้เลยจะไปเขียนใน atom editor ก็ช้าแล้วจะใช้อะไรดีล่ะ นั้นก็คือ boostnote.io นั้นเองมันมาช่วยให้ผมมีความรู้สึกอยากเขียน note มากขึ้น~ ที่จริงไม่เกี่ยวหรอกแค่อยากจะแยก markdown note ออกมาแค่นั้นฮ่าๆๆๆ ถ้าไปเขียน markdown ใน atom editor มันรู้สึกเหมือนตัวเองเขียนโค๊ดก็เลยคิดว่าถ้ามีเวลามาเขียน blog คงมาเขียนใน boostnote แทน ผมหมดเรื่องจะบ่นแล้วง๊าาาา~ ของจบเลยก็แล้วกันนะครับ ชะแว๊บบบบบบ</p>\n",description:"ผมกลับมาเขียน blog ดูอีกครั้งและ design เว็บใหม่",author:"Tar Jarupong",image:{type:"image",mimeType:"image/jpeg",src:"https://i.imgur.com/4X28DdS.jpg"}}}]}}}}}]);