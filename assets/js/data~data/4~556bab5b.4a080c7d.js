(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{42:function(e){e.exports={data:{allBlogPost:{edges:[{node:{id:"cfbd7cdf15ecf548001e54bd9f0ca595",date:"12 February, 2019",title:"ทำไมเราถึงควรใช้ MongoDB native แทน Mongoose",path:"/BlogPost/NodeJS-%2B-MongoDB-native",content:'<p>โดยปรกติแล้วเราจะเห็นบทความส่วนใหญ่ จะเป็น NodeJS + Mongoose ซึ่งถ้าถามว่าดีมั๊ย?​ มันก็ดีแต่สิงที่จะประสบพบเจอก็คือเรื่อง performance</p>\n<table>\n<thead>\n<tr>\n<th>FindOne</th>\n<th>Find</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src="https://i.imgur.com/ZUiNwsA.png" alt="ZUiNwsA.png"></td>\n<td><img src="https://i.imgur.com/2487u8h.png" alt="2487u8h.png"></td>\n</tr>\n</tbody>\n</table>\n<br>\n<table>\n<thead>\n<tr>\n<th>Insert</th>\n<th>InsertMany</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src="https://i.imgur.com/gohqOjl.png" alt="gohqOjl.png"></td>\n<td><img src="https://i.imgur.com/abX1IC7.png" alt="abX1IC7.png"></td>\n</tr>\n</tbody>\n</table>\n<p>เราจะเห็นว่าตัว Op/sec ของตัว Mongoose ทำงานช้ากว่า MongoDB native เร็วกว่า 2 เท่า</p>\n<h3 id="แต่"><a href="#%E0%B9%81%E0%B8%95%E0%B9%88" aria-hidden="true"><span class="icon icon-link"></span></a>แต่!!</h3>\n<p>ทำไมเราถึงยังใช้ Mongoose อยู่ นั้นก็เพราะว่า Mongoose มันออกแบบมาแก้ปัญหาเรื่อง Callback ใน MongoDB native ยังไงล๊า เราลองมาดูโค๊ดกัน</p>\n<br>\n<p><strong>Mongoose</strong></p>\n<pre><code> const mongoose = require(\'mongoose\');\n\n    const mongoDB = \'mongodb://127.0.0.1/my_database\';\n    mongoose.connect(mongoDB);\n\n    mongoose.Promise = global.Promise;\n    const db = mongoose.connection;\n</code></pre>\n<br>\n<p><strong>MongoDB Native</strong></p>\n<pre><code> const MongoClient = require(\'mongodb\').MongoClient;\n    const url = "mongodb://localhost:27017/mydb";\n\n    MongoClient.connect(url, function(err, db) {\n      if (err) throw err;\n      db.close();\n    });\n</code></pre>\n<p>ทุกคนก็จะเห็นว่า ตัว MongoDB native มันเป็น callback ซึ่งมันจะเกิด callback hell ในที่สุดถ้าเรามีการทำ operation กับ MongoDB มาขึ้น\nแล้วเราจะแก้ไขยังไงดี นั้นสิทำยังไงดีล่ะครับท่านผู้ชม พอดีผมขี้เกียจเขียนต่อแล้วค่อยมาต่อคราวหน้านะขอรับ</p>\n<p>Ref:</p>\n<p><a href="https://medium.com/@bugwheels94/performance-difference-in-mongoose-vs-mongodb-60be831c69ad" target="_blank" rel="nofollow noopener noreferrer">performance-difference-in-mongoose-vs-mongodb</a></p>\n',description:"MongoDB Native มันดียังไงนะทำไมถึงน่าใช้",author:"Tar Jarupong",image:{type:"image",mimeType:"image/png",src:"https://i.imgur.com/6YfCOxy.png"}}},{node:{id:"349f3a413b76b874add1ab0b0351b384",date:"10 February, 2019",title:"NodeJS Event Emitter สำคัญฉะไหน",path:"/BlogPost/NodeJS-EventEmitter",content:'<p>วันนี้เราจะได้รู้กันว่าตัว NodeJS คืออะไร ดียังไง เริ่มได้~~~</p>\n<p><br/><br/></p>\n<h4 id="node-event-emitter-"><a href="#node-event-emitter-" aria-hidden="true"><span class="icon icon-link"></span></a>Node Event Emitter ?</h4>\n<p>      ด้วยความที่ว่า NodeJS เองทำงานเป็นแบบ event-driven architecture หรือเรียกแบบไทยๆว่าการขับเคลื่อนทุกอย่างด้วย Event มาถึงตรงนี้ทุกคนคงจะงงว่าแล้วตัว event-driven คืออะไร</p>\n  <p align="center">\n    <img src="https://i.imgur.com/yZjiHQy.jpg">\n  </p>  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;รูปนี้ทุกคนคงเข้าใจ event driven ทุกคนจะเห็นว่ามันคือ Observer design pattern นั้นเองนะครับซึ่งตัว Observer pattern เองเป็นฐานในการทำ event driven ผมขอไม่ลงลึกเรื่อง Observer pattern ง่ายๆก็คือ Observer pattern เอาไว้สำหรับสังเกตุการเปลี่ยนแปลงข้อมูลว่าเปลี่ยนแปลงไปยังไงบ้างนั้นเองครับ\n<br/><br/>\n<h4 id="node-event-ใช้งานยังไง-"><a href="#node-event-%E0%B9%83%E0%B8%8A%E0%B9%89%E0%B8%87%E0%B8%B2%E0%B8%99%E0%B8%A2%E0%B8%B1%E0%B8%87%E0%B9%84%E0%B8%87-" aria-hidden="true"><span class="icon icon-link"></span></a>Node Event ใช้งานยังไง ?</h4>\n<p>มาเริ่มใช้ Event emitter กันเลยครับผมขอวาดภาพว่าเราจะทำ service อะไรด้วย Event Emitter นะครับ</p>\n<p><img src="https://i.imgur.com/OECu3Yh.png" alt="OECu3Yh.png"></p>\n<p>ผมจะลองเขียนตามนี้นะครับ เริ่ม~~~\n<br/><br/>\n<strong>#1 ทำการสร้าง require และสร้าง event ตัวนึง</strong></p>\n<pre><code>const EventEmitter = require(\'events\');\n    const myService = new EventEmitter();\n</code></pre>\n<p><br/><br/>\n<strong>#2 สร้างตัว emit data</strong></p>\n<pre><code>// ให้มีการส่งข้อมูลทุกๆ 1 วินาที\n  setInterval(()=>{\n    myService.emit(\'registration\',{\n          name: "Tar",\n          email: "Tar@email.com"\n       })\n  },1000)\n</code></pre>\n<p>ต้องอธิบายก่อนว่าตัว registration คือชื่อ event ครับส่วนตัว object คือข้อมูลที่เราจะส่งผ่านตัว regitration event</p>\n<p><br/><br/>\n<strong>#3 สร้างตัว listener สำหรับ email &#x26; admin</strong></p>\n<pre><code>  // ใครยังไม่เคยใช้ => หรือ arrow function ผมมี ref ไว้ข้างล่างครับ\n  // email service\n  myService.on(\'registration\', (userData) => {\n    console.log("\\n\\n");\n    console.log(`ส่ง email ไปหาคุณ ${userData.name} ไปที่ ${userData.email}`)\n  })\n\n  // admin service\n  myService.on(\'registration\', (userData)=>{\n    console.log(`เจ้านายครับมีลูกค้าสมัครสมาชิก คุณ ${userData.name}$`)\n  })\n</code></pre>\n<p><br/><br/>\n<strong>#4 โค๊ดเต็มๆตามนี้เลยครับ</strong></p>\n<pre><code>  const EventEmitter = require(\'events\');\n      const myService = new EventEmitter();\n\n      setInterval(()=>{\n        myService.emit(\'registration\',{\n              name: "Tar",\n              email: "Tar@email.com"\n           })\n        },1000)\n\n      myService.on(\'registration\', (userData) => {\n        console.log("\\n\\n");\n        console.log(`ส่ง email ไปหาคุณ ${userData.name} ไปที่ ${userData.email}`)\n      })\n\n\n      myService.on(\'registration\', (userData)=>{\n        console.log(`เจ้านายครับมีลูกค้าสมัครสมาชิก คุณ ${userData.name}$`)\n      })\n</code></pre>\n<br/>\n<p><strong>#5 มาดูผลลัพธ์กันเลยครับ</strong></p>\n<p align="center">\n  <img src="https://i.imgur.com/i7sXG6v.png" width="50%">\n</p>  \n<br/>\n<br/>\nก็จบกันไปแล้วนะครับสำหรับ NodeJS Event Emitter แบบพื้นฐานมาก!!!! ผมก็หวังว่าผู้อ่านจะเข้าใจการทำงานและการเขียน Event Emitter นะครับผม วันนี้ผมต้าขอตัวลาไปก่อนชะแว๊บ~~~\n<br/>ปล. เดี๋ยวจะมาเขียนเพิ่มเติมว่าไปปรับใช้งานยังไงนะครับ ^ _ ^\n<br/><br/>\n<p>Ref:</p>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="nofollow noopener noreferrer">Arrow functions</a></p>\n<p><a href="https://en.wikipedia.org/wiki/Event-driven_architecture" target="_blank" rel="nofollow noopener noreferrer">Event-driven architecture</a></p>\n<p><a href="https://en.wikipedia.org/wiki/Observer_pattern" target="_blank" rel="nofollow noopener noreferrer">Observer pattern</a></p>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" target="_blank" rel="nofollow noopener noreferrer">Template literals</a></p>\n',description:"ผมเห็นหลายๆคนที่เขียน NodeJS แล้วไม่ค่อยมีคนใช้ EventEmitter หรือบางทีก็ใช้",author:"Tar Jarupong",image:{type:"image",mimeType:"image/png",src:"https://i.imgur.com/7oG5ce7.png"}}},{node:{id:"67c5dae4bf3034994e3e0d6fb27f7a90",date:"10 February, 2019",title:"Pipe function ใน Javascript",path:"/BlogPost/Pipe-Javascript",content:'<p>สำหรับใครที่เคยใช้เจ้าแพะหรือ ramdaJS มาก่อนคงได้ยินหรือเคยใช้ pipe() มาอยู่แล้ว ซึ่งพี่ pipe() เอาไว้ทำอะไรน่ะเหรอ ดูตัวอย่างเลยครับ</p>\n<pre><code>getFirstChar( toLowerCase(data))\n</code></pre>\n<p>ทุกเห็นคงคิดว่าก็ไม่เห็นมีไรเลยซับซ้อนตรงไหนแค่ 2 functions เอง แต่ถ้าสมมุติเป็นแบบนี้ล่ะ</p>\n<pre><code>getFirstChar( toLowerCase(convertAsciiToText(getName(data))))\n</code></pre>\n<p><img src="https://firebasestorage.googleapis.com/v0/b/myblog-7f48d.appspot.com/o/flamelink%2Fmedia%2F1545679658057_1545660065385_holy-shit-what-dc0kau.jpg?alt=media&#x26;token=494d24a5-5bba-42fc-a2c0-6fa7b851a73f"></p>\n<p>เฮ๊<del></del>~~ ทุกคนกำลังคิดแบบนี้อยู่แน่ๆ</p>\n<p>ก่อนที่เราจะมาพูดถึงวิธีการแก้ไขปัญหา เรามาพูดถึงแนวคิดของเจ้า pipe กันก่อน ต้องย้อนกลับไปความรู้ทางคณิตศาสตร์ตอน ม. 5 การเลยคือเรื่อง relation and function ต้องขอบอกก่อนว่าผมก็ไม่เก่งคณิตศาสตร์แต่ผมจะพยายามอธิบายให้ง่ายที่สุดเท่าที่จะทำได้นะครับ</p>\n<p><strong>Math #1 basic function</strong></p>\n<br/>\nสมมุติว่าผมสร้าง function ตัวนึงสำหรับรับค่า x เพื่อนำไปบวก 2\n<pre><code>f(x) = x + 2\n</code></pre>\n<br/>\nทีนี้ผมสร้างอีก function นึงสำหรับรับค่า x แล้วทำไปคูณ 5\n<pre><code>g(x) = x * 5\n</code></pre>\n<br/>\nเริ่มจาก function แรกก่อน\n<pre><code>f(2) = 2 + 2\n     = 4\n</code></pre>\n<br/>\nต่อมาตัวก็เป็น function g\n<pre><code>g(2) = 2 * 5\n     = 10\n</code></pre>\n<br/>\nนี้ก็เป็นตัวอย่างเล็กๆน้อยจากเรื่อง function สำหรับ ม. 5 ต่อไปมาเริ่มในสิ่งที่ยากขึ้นอีกระดับนึงเรียกว่า composite function เริ่ม!!\n<p><strong>Math #2 Composite function</strong>\n<br/>\nง่ายๆมันคือการรวม function เข้าด้วยกันนั้นเอง ผมขอยก 2 functions ด้านบนมาด้วยนะครับจะได้ไม่เสียเวลา มันก็จะได้แบบนี้</p>\n<br/>\nอันดับแรกผมเอา 2 function2 นี้รวมกัน\n<pre><code>f(g(x))\n</code></pre>\n<br/>\nผมจะเขียนแนวการคิดไปทีละขั้นตอนเน้อ...\n<pre><code>f(g(x)) = f(x * 5)\n        = (x * 5) + 2\n</code></pre>\n<br/>\nลองมาดูตัวอย่างกัน\n<pre><code>f(g(2)) = f(2 * 5)\n        = (2 * 5) + 2\n        = 10 + 2\n        = 12\n</code></pre>\n<br/>\nเอ๊ะแล้วเจ้า pipe() สุดที่รักของเรามันเกี่ยวอะไรกับคณิตศาสตร์ชวนปวดหัว ผมต้องบอกเลยว่ามันคืออันเดียวกัน ผมจะเปรียบเทียบให้ดู\n<pre><code>f(g(x)) = getFirstChar( toLowerCase(data))\n</code></pre>\n<br/>\nเห็นมั๊ยว่าเหมือนกันเป๊ะๆ เรามาดูโค๊ด pipe() กันเลย\n<pre><code>const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x)\n</code></pre>\n<br/>\n<p>สำหรับใครที่ไม่รู้จัก Rest Parameter &#x26; Reduce Parameter ตามนี้โล๊ดวิธีการใช้ตัว pipe() ก็ตามนี้เลย</p>\n<br/>\n<pre><code>pipe(getFirstChar, toLowerCase, convertAsciiToText, getName)(data)\n</code></pre>\n<br/>\n<p>เห็นมั๊ยว่าสะดวกและอ่านงานกว่าเยอะ ถือว่าเป็นวิธีที่ดีมากๆเป็นไงบ้างครับ สำหรับอะไรแบบนี้</p>\n<br/>\nRef:\n<p><a href="https://medium.com/front-end-weekly/pipe-and-compose-in-javascript-5b04004ac937" target="_blank" rel="nofollow noopener noreferrer">pipe</a></p>\n<p><a href="https://medium.freecodecamp.org/how-do-javascript-rest-parameters-actually-work-227726e16cc8" target="_blank" rel="nofollow noopener noreferrer">rest parameter</a></p>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="nofollow noopener noreferrer">reduce</a></p>\n',description:"ท่านใดเคยประสบปัญหาเรื่องการใช้ transformation function เยอะๆรึเปล่า ผมมีทางแก้มาทำเสนอ",author:"Tar Jarupong",image:{type:"image",mimeType:"image/jpeg",src:"https://i.imgur.com/fp0HTAi.jpg"}}}]}}}}}]);