(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{62:function(n){n.exports={data:{nodePost:{title:"Event-loop แบบพื้นฐานมากกกกก ตอนที่ 1",date:"16 February, 2019",content:'<p>สวัสดีครับผมกลับมาพบกับต้าคนเดิมคนดีอีกเช่นเคยนะครับ ซึ่งวันนี้ผมจะมาเล่าเรื่อง Event-loop ใน NodeJS ในภาษาและรูปภาพที่ทุกคนเข้าใจกันมาจะรอช้าอยู่ทำไมเข้าเรื่องกันเลย เดี๋ยวก่อนสิ ถ้าสำหรับใครที่ยังไม่ได้อ่านเรื่อง execution stack แนะนำให้กลับไปอ่านก่อนนะครับ <a href="https://krapokecode.github.io/BlogPost/exec-context-stack" target="_blank" rel="nofollow noopener noreferrer">link</a> จะได้เข้าใจมากขึ้น มาเข้าเรื่องกันเลยครับ</p>\n<h4 id="event-loop"><a href="#event-loop" aria-hidden="true"><span class="icon icon-link"></span></a>Event loop</h4>\n<p>คือการทำงานใน NodeJS เป็นแบบ Single-thread แล้วตัว single thread คืออะไร มาเริ่มที่ single thread กันก่อนนะครับ เริ่ม~~~</p>\n<p><img src="https://i.imgur.com/sxoUOEC.png" alt="sxoUOEC.png"></p>\n<p>ตรงนี้ทุกคนคนจะเห็นว่าในหนึ่ง process มันมีอยู่หนึ่ง thread ครับแต่ในความเป็นจริงแล้ว process สามารถมีได้หลายๆ thread โดยแต่ละตัวจะกระจายกันทำงานคนละแบบหรือทำงานแบบเดียวกันก็ได้ ทั้งหมดนี้คือ process &#x26; thread แบบพื้นฐานสุดๆ ได้เวลากลับมาเข้าเรื่องหลักกันครับ เรื่องของเรื่องก็คือ Event-loop มันทำงานอยู่แค่ thread เดียวครับ รูปภาพก็จะประมาณนี้ครับ</p>\n<pre><code>// Event loop\n   ┌───────────────────────────┐\n┌─>│           timers          │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │     pending callbacks     │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │       idle, prepare       │\n│  └─────────────┬─────────────┘      ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming:   │\n│  │           poll            │&#x3C;─────┤  connections, │\n│  └─────────────┬─────────────┘      │   data, etc.  │\n│  ┌─────────────┴─────────────┐      └───────────────┘\n│  │           check           │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks      │\n   └───────────────────────────┘\n</code></pre>\n<p>ผมต้องขอบอกก่อนว่าตัว NodeJS จะทำงานเป็นแบบคิววิ่งวนไปเรื่อยๆเพื่อเช็คว่ามีอะไรที่ต้องประมวลผลอีกรึเปล่า ประมาณนี้ครับ งั้นก็มาพูดถึงแต่ละตัวกันเลยครับ</p>\n<p><strong>Timers</strong></p>\n<p>      เป็นสิ่งแรกในการทำงานของ event loop สำหรับจัดการเป็นส่วนสำหรับเรียกใช้งาน function ที่เป็น callback เช่น <em>setTimeout()</em> , <em>setInterval()</em> เป็นต้น</p>\n<p><strong>Pending Callback</strong></p>\n<p>       สำหรับจัดการเมื่อ callback ทำงานเสร็จสิ้นหรือ error ครับ</p>\n<p><strong>Poll</strong></p>\n<p>      ตัว poll เป็นตัวรอรับ request หรือ I/O event อันใหม่</p>\n<p><strong>idle, prepare</strong></p>\n<p>       จะทำงานส่วนอยู่ใต้ลงไปอีก ผมขอพูดถึงบทบทความหน้าครับ ^^</p>\n<p><strong>check</strong></p>\n<p>       ตรงจุดนี้ใช้สำหรับประมวลผล <em>setImmediate()</em> ได้ครับ</p>\n<p><strong>Close callback</strong></p>\n<p>      ตามชื่อเลยครับ สำหรับปิด callback หรือ event ต่างๆ</p>\n<br>\n<p>ต้องขอตัดจบแบบละครไทยด้วยนะครับในบทความหน้าผมสัญญาว่าจะมาเล่าให้ละเอียดกว่านี้เพื่อให้ทุกคนเข้าใจมากขึ้นครับ</p>\n<p>ปล. ที่จริงมีเรื่อง Event-multiplexer, mico task blah blah ที่ผมยังไม่ได้พูดอีก เศร้า</p>\n',image:{type:"image",mimeType:"image/png",src:"https://i.imgur.com/ywItdDB.png"},author:"Tar Jarupong"}}}}}]);